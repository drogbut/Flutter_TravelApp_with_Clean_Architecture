// Mocks generated by Mockito 5.4.4 from annotations
// in travel_app/test/features/flight_offer/data/repositories_impl/flight_offer_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:dartz/dartz.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i10;
import 'package:travel_app/core/errors/failure.dart' as _i9;
import 'package:travel_app/core/network/network_info.dart' as _i4;
import 'package:travel_app/features/flight_offer/data/data_sources/flight_offer_local_data_source.dart'
    as _i3;
import 'package:travel_app/features/flight_offer/data/data_sources/flight_offer_remote_data_source.dart'
    as _i2;
import 'package:travel_app/features/flight_offer/data/models/flight_offer/flight_offer.dart'
    as _i6;
import 'package:travel_app/features/flight_offer/data/repositories_impl/amadeus_repository_impl.dart'
    as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFlightOfferRemoteDataSource_0 extends _i1.SmartFake
    implements _i2.FlightOfferRemoteDataSource {
  _FakeFlightOfferRemoteDataSource_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFlightOfferLocalDataSource_1 extends _i1.SmartFake
    implements _i3.FlightOfferLocalDataSource {
  _FakeFlightOfferLocalDataSource_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNetworkInfo_2 extends _i1.SmartFake implements _i4.NetworkInfo {
  _FakeNetworkInfo_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_3<L, R> extends _i1.SmartFake implements _i5.Either<L, R> {
  _FakeEither_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFlightOffer_4 extends _i1.SmartFake implements _i6.FlightOffer {
  _FakeFlightOffer_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [FlightOfferRepositoryImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlightOfferRepositoryImpl extends _i1.Mock
    implements _i7.AmadeusRepositoryImpl {
  MockFlightOfferRepositoryImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FlightOfferRemoteDataSource get remoteDataSource => (super.noSuchMethod(
        Invocation.getter(#remoteDataSource),
        returnValue: _FakeFlightOfferRemoteDataSource_0(
          this,
          Invocation.getter(#remoteDataSource),
        ),
      ) as _i2.FlightOfferRemoteDataSource);

  @override
  _i3.FlightOfferLocalDataSource get localDataSource => (super.noSuchMethod(
        Invocation.getter(#localDataSource),
        returnValue: _FakeFlightOfferLocalDataSource_1(
          this,
          Invocation.getter(#localDataSource),
        ),
      ) as _i3.FlightOfferLocalDataSource);

  @override
  _i4.NetworkInfo get networkInfo => (super.noSuchMethod(
        Invocation.getter(#networkInfo),
        returnValue: _FakeNetworkInfo_2(
          this,
          Invocation.getter(#networkInfo),
        ),
      ) as _i4.NetworkInfo);

  @override
  _i8.Future<_i5.Either<_i9.Failure, _i6.FlightOffer>> getFlightOffersSearch(
    String? originLocationCode,
    String? destinationLocationCode,
    String? departureDate,
    String? numberOfPassengers,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAvailableFlights,
          [
            originLocationCode,
            destinationLocationCode,
            departureDate,
            numberOfPassengers,
          ],
        ),
        returnValue: _i8.Future<_i5.Either<_i9.Failure, _i6.FlightOffer>>.value(
            _FakeEither_3<_i9.Failure, _i6.FlightOffer>(
          this,
          Invocation.method(
            #getAvailableFlights,
            [
              originLocationCode,
              destinationLocationCode,
              departureDate,
              numberOfPassengers,
            ],
          ),
        )),
      ) as _i8.Future<_i5.Either<_i9.Failure, _i6.FlightOffer>>);
}

/// A class which mocks [FlightOfferRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlightOfferRemoteDataSource extends _i1.Mock
    implements _i2.FlightOfferRemoteDataSource {
  MockFlightOfferRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<String> getAccessToken() => (super.noSuchMethod(
        Invocation.method(
          #getAccessToken,
          [],
        ),
        returnValue: _i8.Future<String>.value(_i10.dummyValue<String>(
          this,
          Invocation.method(
            #getAccessToken,
            [],
          ),
        )),
      ) as _i8.Future<String>);

  @override
  _i8.Future<_i6.FlightOffer> getAvailableFlights({
    required String? originLocationCode,
    required String? destinationLocationCode,
    required String? departureDate,
    required String? numberOfPassengers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAvailableFlights,
          [],
          {
            #originLocationCode: originLocationCode,
            #destinationLocationCode: destinationLocationCode,
            #departureDate: departureDate,
            #numberOfPassengers: numberOfPassengers,
          },
        ),
        returnValue: _i8.Future<_i6.FlightOffer>.value(_FakeFlightOffer_4(
          this,
          Invocation.method(
            #getAvailableFlights,
            [],
            {
              #originLocationCode: originLocationCode,
              #destinationLocationCode: destinationLocationCode,
              #departureDate: departureDate,
              #numberOfPassengers: numberOfPassengers,
            },
          ),
        )),
      ) as _i8.Future<_i6.FlightOffer>);
}

/// A class which mocks [FlightOfferLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlightOfferLocalDataSource extends _i1.Mock
    implements _i3.FlightOfferLocalDataSource {
  MockFlightOfferLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i6.FlightOffer> getLastAvailableFlights() => (super.noSuchMethod(
        Invocation.method(
          #getLastAvailableFlights,
          [],
        ),
        returnValue: _i8.Future<_i6.FlightOffer>.value(_FakeFlightOffer_4(
          this,
          Invocation.method(
            #getLastAvailableFlights,
            [],
          ),
        )),
      ) as _i8.Future<_i6.FlightOffer>);

  @override
  _i8.Future<void> cacheAvailableFlights(_i6.FlightOffer? flightOfferModel) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheAvailableFlights,
          [flightOfferModel],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i4.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);
}
